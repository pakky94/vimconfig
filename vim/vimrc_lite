" https://github.com/vim/vim-win32-installer/releases
" source ~/vimfiles/vimrc
" Vim env variables {{{
if has('win32') || has ('win64')
    let $SHELL = '"C:\\Program Files\\PowerShell\\6\\pwsh.exe"'
    let $VIMHOME = $HOME."\\dotfiles\\vim"
    let $VIMRC = $VIMHOME."\\vimrc"
    "let g:python3_host_prog = "C:\\Python37\\python.exe"
    let $PATH .= ';'.$HOME.'/vimfiles/bin'
    "set shell=pwsh.exe
    "set shellcmdflag=-NoProfile\ -NoLogo\ -NonInteractive\ -Command
    "set shellpipe=|
    "set shellredir=>
    "source $VIMRUNTIME/mswin.vim
    if empty(glob($VIMHOME.'/autoload/plug.vim'))
        silent !curl -fLo $HOME/dotfiles/vim/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $VIMRC
    endif
else
    let $VIMHOME = $HOME."/dotfiles/vim"
    let $VIMRC = $VIMHOME."/vimrc_lite"
endif
" }}}
" Vim-plug and plugins {{{
call plug#begin($VIMHOME.'/bundle')

Plug 'lifepillar/vim-solarized8'

Plug 'tpope/vim-obsession'
Plug 'tpope/vim-surround'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'

Plug 'scrooloose/nerdcommenter'

call plug#end()
" }}}
" General settings {{{
set encoding=utf-8
set fileencoding=utf-8
set ffs=unix,dos
scriptencoding utf-8
set langmenu=en_US.UTF-8    " sets the language of the menu (gvim)
if has('nvim')
    language en_US.utf8     " sets the language of the messages / ui (vim)
else
    language en
endif
syntax enable " enable syntax processing
set nocompatible
filetype plugin on
filetype plugin indent on " load filetype-specific indent files
set belloff=all " disable bell sounds and screen flashes
"set lines=60 columns=160 " console default size (for GUI see below)
set backspace=2 " make backspace work like most other programs
set lazyredraw " don't redraw while executing macros
"set regexpengine=1 " use old regex engine
set magic " for regular expressions torn magic on
set autoread " set to auto read when a file is changed from outside

set scrolloff=2 " keep 2 lines of context around the cursor

set nobackup
set nowritebackup

set shortmess+=c "don't give \|ins-completion-menu\| messages
set cmdheight=2

set signcolumn=yes
"set splitright
set inccommand=nosplit
" }}}
" Coloring {{{
if has("termguicolors")
	let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	set termguicolors
endif
"set termguicolors
set background=dark
set t_Co=256
"let ayucolor="dark"
colorscheme solarized8_flat

"let g:airline_theme='ayu_dark'
let g:airline_theme='solarized'
let g:airline#extensions#coc#enabled = 1
let g:airline#extensions#branch#enabled = 0
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline#extensions#obsession#enabled = 1
let g:airline#extensions#obsession#indicator_text = '$'
"let g:airline_solarized_bg='dark'
" }}}
" UI Layout {{{
set number " current line number
set relativenumber " relative line numbers
set ruler " enable ruler
set laststatus=2 " ruler always on
set showcmd " show command in bottom bar
set cursorline " highlight current line

" show relative line number for current window
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained * set relativenumber
  autocmd BufLeave,FocusLost   * set norelativenumber
  "autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  "autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END
" }}}
" Searching {{{
set ignorecase " ignore case when searching
set smartcase " when searching try to be smart about cases
set incsearch " search while typing
set hlsearch " highlight search results
set wildmenu " visual autocomplete for command menu
" }}}
" Spaces & Tabs {{{
set tabstop=4 " number of visual spaces per TAB
set softtabstop=4 " number of spaces in tab when editing
set shiftwidth=4
set expandtab " TABs are spaces
set smartindent
"set listchars=tab:»·,space:·
set listchars=tab:»·,trail:·
set list
" }}}
" Folding {{{
set foldcolumn=1 " add a bit extra margin to the left
set foldmethod=marker
set foldlevelstart=10 " open most fold by default
set foldnestmax=10 " 10 nested fold max
" }}}
" Diff settings {{{
set diffopt=vertical,filler
" }}}
" Neovim settings {{{
if has("nvim")
    set guifont=Fira\ Code:h10
    "set wildoptions=pum
endif
" }}}
" Global keymaps {{{
let g:EasyMotion_do_mapping = 0 " Disable default mappings.
" extra <ESC> binding to <C-[>
noremap <C-[> <esc>
" map Y to yank until the EOL and not work like yy
map Y y$
" use <Esc> to exit a terminal
:tnoremap <Esc> <C-\><C-n>
" }}}
" Normal mode keymaps {{{
" insert new line with <cr> in normal mode
nnoremap <cr> o<esc>k
" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-l> :nohl<cr><C-l>
" highlight last inserted text
nnoremap gV `[v`]
" navigate and close buffers
"nnoremap <C-n> :bnext<cr>
"nnoremap <C-p> :bprevious<cr>
"nnoremap <C-x> :bdelete<cr>
" resize window with arrow keys
nnoremap <Left> :vertical resize +2<CR>
nnoremap <Right> :vertical resize -2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>
nnoremap U <c-r>

nnoremap <silent> <space>te :tabnew<CR>
nnoremap <silent> <space>tt :tabnext<CR>
nnoremap <silent> <space>tn :tabnext<CR>
nnoremap <silent> <space>tp :-tabnext<CR>
nnoremap <silent> <space>tq :tabclose<CR>
nnoremap <silent> <space>tl :tabmove +<CR>
nnoremap <silent> <space>th :tabmove -<CR>
" }}}
" Movement keymaps {{{
" move vertically by visual line
nnoremap j gj
nnoremap k gk
" use B and E to move to the beggining/end of the line
"nnoremap B ^
"nnoremap E $
" }}}
" Leader keymaps {{{
let mapleader = " "
"set timeoutlen=800 " timeout for next key before executing commands

" quick close by ;q
nnoremap <leader>q :q<cr>
" quick save by ;w
nnoremap <leader>w :up!<cr>
" save and quit
nnoremap <leader>wq :wq<cr>
" quick open :Buffers with ;b
nnoremap <leader>b :Buffers<cr>
" Fuzzy search for files to open
nnoremap <leader>f :GFiles<cr>
" open file explore with <leader><o>
"nnoremap <leader>o :Lexplore<cr>
nnoremap <leader>o :NERDTreeToggle<cr>
" toggle gundo
nnoremap <leader>u :UndotreeToggle<CR>
" save session
"nnoremap <leader>s :mksession<CR>
" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader><leader>re :vsp $VIMRC<CR>
nnoremap <leader><leader>rs :source $VIMRC<CR>
" Smart way to move between windows
"nnoremap <leader>wh <C-w>h
"nnoremap <leader>wj <C-w>j
"nnoremap <leader>wk <C-w>k
"nnoremap <leader>wl <C-w>l
"nnoremap <leader>ww <C-w>w
" ;<space> to start EasyMotion in both direction
nmap <leader>e <Plug>(easymotion-bd-w)
" }}}
" Copy & Paste shortcuts {{{
" paste from system clipboard
nnoremap <leader>v "+p
" copy to system clipboard
vnoremap <leader>c "+y
" }}}
